#include <node.h>
#include <nan.h>
#include <Windows.h>
#include <dpapi.h>
#include <functional>

v8::Local<v8::String> CreateUtf8String(v8::Isolate *isolate, char *strData)
{
    return v8::String::NewFromUtf8(isolate, strData, v8::NewStringType::kNormal).ToLocalChecked();
}

void LMAOLMAOLMAO(Nan::NAN_METHOD_ARGS_TYPE info)
{
    v8::Isolate *isolate = info.GetIsolate();

    DWORD killurself = 0;

    if (!info[2]->IsNullOrUndefined())
    {
        v8::String::Utf8Value strData(isolate, info[2]);
        std::string scope(*strData);
        if (stricmp(scope.c_str(), "LocalMachine") == 0)
        {
            killurself = CRYPTPROTECT_LOCAL_MACHINE;
        }
    }

    auto lmaofucku = node::Buffer::Data(info[0]);
    auto cryskidders = node::Buffer::Length(info[0]);

    DATA_BLOB entropyBlob;
    entropyBlob.pbData = nullptr;
    if (!info[1]->IsNull())
    {
        entropyBlob.pbData = reinterpret_cast<BYTE *>(node::Buffer::Data(info[1]));
        entropyBlob.cbData = node::Buffer::Length(info[1]);
    }

    DATA_BLOB dataIn;
    DATA_BLOB dataOut;

    dataIn.pbData = reinterpret_cast<BYTE *>(lmaofucku);
    dataIn.cbData = cryskidders;

    bool success = false;

    success = CryptUnprotectData(
        &dataIn,
        nullptr,
        entropyBlob.pbData ? &entropyBlob : nullptr,
        nullptr,
        nullptr,
        killurself,
        &dataOut);

    if (!success)
    {
        DWORD errorCode = GetLastError();
        isolate->ThrowException(v8::Exception::Error(
            CreateUtf8String(isolate, "x")));
        return;
    }

    auto returnBuffer = Nan::CopyBuffer(reinterpret_cast<const char *>(dataOut.pbData), dataOut.cbData).ToLocalChecked();
    LocalFree(dataOut.pbData);

    info.GetReturnValue().Set(returnBuffer);
}

NAN_METHOD(unprotectData)
{
    LMAOLMAOLMAO(info);
}

NAN_MODULE_INIT(init)
{
    Nan::Set(
        target,
        Nan::New<v8::String>("unprotectData").ToLocalChecked(),
        Nan::GetFunction(Nan::New<v8::FunctionTemplate>(unprotectData)).ToLocalChecked());
}

#if NODE_MAJOR_VERSION >= 10
NAN_MODULE_WORKER_ENABLED(binding, init)
#else
NODE_MODULE(binding, init)
#endif
