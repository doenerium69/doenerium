{"version":3,"file":"ArchiveTarget.js","sourceRoot":"","sources":["../../src/targets/ArchiveTarget.ts"],"names":[],"mappings":";;;AAAA,+CAA0D;AAC1D,6BAA4B;AAC5B,kCAAiE;AACjE,gDAA2D;AAE3D,uCAAwC;AACxC,mFAAgF;AAEhF,MAAa,aAAc,SAAQ,aAAM;IAGvC,YAAY,IAAY,EAAW,MAAc,EAAmB,QAA+B,EAAmB,oBAAoB,KAAK;QAC7I,KAAK,CAAC,IAAI,CAAC,CAAA;QADsB,WAAM,GAAN,MAAM,CAAQ;QAAmB,aAAQ,GAAR,QAAQ,CAAuB;QAAmB,sBAAiB,GAAjB,iBAAiB,CAAQ;QAFtI,YAAO,GAA2B,IAAI,CAAC,QAAQ,CAAC,MAAc,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;IAIlF,CAAC;IAED,KAAK,CAAC,KAAK,CAAC,SAAiB,EAAE,IAAU;QACvC,MAAM,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAA;QAC9B,MAAM,KAAK,GAAG,QAAQ,CAAC,QAAQ,KAAK,eAAQ,CAAC,GAAG,CAAA;QAChD,MAAM,MAAM,GAAG,IAAI,CAAC,IAAI,CAAA;QAExB,IAAI,cAAsB,CAAA;QAC1B,MAAM,WAAW,GAAS,oCAAqB,CAAC,QAAQ,CAAC,4BAA4B,CAAC,WAAW,CAAC,CAAA;QAClG,IAAI,QAAQ,CAAC,QAAQ,KAAK,eAAQ,CAAC,KAAK,EAAE;YACxC,uDAAuD;YACvD,cAAc,GAAG,oBAAoB,GAAG,CAAC,IAAI,KAAK,WAAW,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,UAAU,CAAC,GAAG,SAAS,CAAA;SAC7F;aAAM;YACL,uDAAuD;YACvD,cAAc,GAAG,2BAA2B,GAAG,CAAC,IAAI,KAAK,WAAW,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,UAAU,CAAC,GAAG,eAAe,CAAA;SAC1G;QAED,MAAM,YAAY,GAAG,QAAQ,CAAC,yBAAyB,CAAC,IAAI,CAAC,OAAO,EAAE,MAAM,EAAE,IAAI,EAAE,cAAc,EAAE,KAAK,CAAC,CAAA;QAC1G,MAAM,YAAY,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,YAAY,CAAC,CAAA;QAEzD,MAAM,QAAQ,CAAC,IAAI,CAAC,wBAAwB,CAAC;YAC3C,qBAAqB,EAAE,GAAG,KAAK,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,GAAG,MAAM,EAAE;YAC1D,IAAI,EAAE,YAAY;YAClB,IAAI;SACL,CAAC,CAAA;QACF,IAAI,UAAU,GAAQ,IAAI,CAAA;QAC1B,IAAI,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,EAAE;YAC7B,MAAM,aAAG,CAAC,QAAQ,CAAC,WAAW,EAAE,MAAM,EAAE,YAAY,EAAE,SAAS,EAAE,KAAK,EAAE,QAAQ,CAAC,IAAI,CAAC,cAAc,CAAC,CAAA;SACtG;aAAM;YACL,IAAI,UAAU,GAAG,CAAC,KAAK,CAAA;YACvB,IAAI,YAAY,GAAG,SAAS,CAAA;YAC5B,IAAI,KAAK,EAAE;gBACT,YAAY,GAAG,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,CAAA;gBACtC,MAAM,YAAY,GAAG,6BAAe,CAClC,QAAQ,CAAC,MAAM,EACf,gBAAgB,EAChB,YAAY,EACZ,QAAQ,CAAC,4BAA4B,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,EAAE,QAAQ,CAAC,4BAA4B,CAAC,CAChG,CAAA;gBACD,IAAI,YAAY,IAAI,IAAI,EAAE;oBACxB,YAAY,GAAG,SAAS,CAAA;iBACzB;qBAAM;oBACL,MAAM,uBAAS,CAAC,YAAY,EAAE,IAAI,EAAE,IAAI,CAAC,CAAA;oBACzC,UAAU,GAAG,IAAI,CAAA;iBAClB;aACF;YAED,MAAM,cAAc,GAAG;gBACrB,WAAW,EAAE,QAAQ,CAAC,WAAW;gBACjC,UAAU;aACX,CAAA;YACD,MAAM,iBAAO,CAAC,MAAM,EAAE,YAAY,EAAE,YAAY,EAAE,cAAc,CAAC,CAAA;YAEjE,IAAI,IAAI,CAAC,iBAAiB,IAAI,MAAM,KAAK,KAAK,EAAE;gBAC9C,IAAI,KAAK,EAAE;oBACT,UAAU,GAAG,MAAM,8CAAc,CAAC,YAAY,EAAE,IAAI,EAAE,QAAQ,EAAE,YAAY,CAAC,CAAA;iBAC9E;qBAAM;oBACL,UAAU,GAAG,MAAM,8CAAc,CAAC,YAAY,CAAC,CAAA;iBAChD;aACF;SACF;QAED,MAAM,QAAQ,CAAC,IAAI,CAAC,0BAA0B,CAAC;YAC7C,UAAU;YACV,IAAI,EAAE,YAAY;YAClB,uDAAuD;YACvD,gBAAgB,EAAE,QAAQ,CAAC,uBAAuB,CAChD,YAAY,EACZ,MAAM,EACN,IAAI,EACJ,KAAK,EACL,QAAQ,CAAC,4BAA4B,CAAC,WAAW,EACjD,cAAc,CAAC,OAAO,CAAC,gBAAgB,EAAE,SAAS,CAAC,CACpD;YACD,MAAM,EAAE,IAAI;YACZ,IAAI;YACJ,QAAQ;YACR,iBAAiB,EAAE,IAAI,CAAC,iBAAiB;SAC1C,CAAC,CAAA;IACJ,CAAC;CACF;AArFD,sCAqFC","sourcesContent":["import { Arch, defaultArchFromString } from \"builder-util\"\nimport * as path from \"path\"\nimport { Platform, Target, TargetSpecificOptions } from \"../core\"\nimport { copyFiles, getFileMatchers } from \"../fileMatcher\"\nimport { PlatformPackager } from \"../platformPackager\"\nimport { archive, tar } from \"./archive\"\nimport { appendBlockmap, createBlockmap } from \"./differentialUpdateInfoBuilder\"\n\nexport class ArchiveTarget extends Target {\n  readonly options: TargetSpecificOptions = (this.packager.config as any)[this.name]\n\n  constructor(name: string, readonly outDir: string, private readonly packager: PlatformPackager<any>, private readonly isWriteUpdateInfo = false) {\n    super(name)\n  }\n\n  async build(appOutDir: string, arch: Arch): Promise<any> {\n    const packager = this.packager\n    const isMac = packager.platform === Platform.MAC\n    const format = this.name\n\n    let defaultPattern: string\n    const defaultArch: Arch = defaultArchFromString(packager.platformSpecificBuildOptions.defaultArch)\n    if (packager.platform === Platform.LINUX) {\n      // tslint:disable-next-line:no-invalid-template-strings\n      defaultPattern = \"${name}-${version}\" + (arch === defaultArch ? \"\" : \"-${arch}\") + \".${ext}\"\n    } else {\n      // tslint:disable-next-line:no-invalid-template-strings\n      defaultPattern = \"${productName}-${version}\" + (arch === defaultArch ? \"\" : \"-${arch}\") + \"-${os}.${ext}\"\n    }\n\n    const artifactName = packager.expandArtifactNamePattern(this.options, format, arch, defaultPattern, false)\n    const artifactPath = path.join(this.outDir, artifactName)\n\n    await packager.info.callArtifactBuildStarted({\n      targetPresentableName: `${isMac ? \"macOS \" : \"\"}${format}`,\n      file: artifactPath,\n      arch,\n    })\n    let updateInfo: any = null\n    if (format.startsWith(\"tar.\")) {\n      await tar(packager.compression, format, artifactPath, appOutDir, isMac, packager.info.tempDirManager)\n    } else {\n      let withoutDir = !isMac\n      let dirToArchive = appOutDir\n      if (isMac) {\n        dirToArchive = path.dirname(appOutDir)\n        const fileMatchers = getFileMatchers(\n          packager.config,\n          \"extraDistFiles\",\n          dirToArchive,\n          packager.createGetFileMatchersOptions(this.outDir, arch, packager.platformSpecificBuildOptions)\n        )\n        if (fileMatchers == null) {\n          dirToArchive = appOutDir\n        } else {\n          await copyFiles(fileMatchers, null, true)\n          withoutDir = true\n        }\n      }\n\n      const archiveOptions = {\n        compression: packager.compression,\n        withoutDir,\n      }\n      await archive(format, artifactPath, dirToArchive, archiveOptions)\n\n      if (this.isWriteUpdateInfo && format === \"zip\") {\n        if (isMac) {\n          updateInfo = await createBlockmap(artifactPath, this, packager, artifactName)\n        } else {\n          updateInfo = await appendBlockmap(artifactPath)\n        }\n      }\n    }\n\n    await packager.info.callArtifactBuildCompleted({\n      updateInfo,\n      file: artifactPath,\n      // tslint:disable-next-line:no-invalid-template-strings\n      safeArtifactName: packager.computeSafeArtifactName(\n        artifactName,\n        format,\n        arch,\n        false,\n        packager.platformSpecificBuildOptions.defaultArch,\n        defaultPattern.replace(\"${productName}\", \"${name}\")\n      ),\n      target: this,\n      arch,\n      packager,\n      isWriteUpdateInfo: this.isWriteUpdateInfo,\n    })\n  }\n}\n"]}