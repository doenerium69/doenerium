"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _assert = require("assert");

var _constants = require("../constants");

var _order = require("../order");

var _traverse = _interopRequireWildcard(require("../traverse"));

var _gen = require("../util/gen");

var _identifiers = require("../util/identifiers");

var _insert = require("../util/insert");

var _random = require("../util/random");

var _transform = _interopRequireDefault(require("./transform"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 * Brings every function to the global level.
 *
 * Functions take parameters, input, have a return value and return modified changes to the scoped variables.
 *
 * ```js
 * function topLevel(ref1, ref2, refN, param1, param2, paramN){
 *   return [ref1, ref2, refN, returnValue];
 * }
 * ```
 *
 * Flatten is used to make functions eligible for the RGF transformation.
 */
class Flatten extends _transform.default {
  constructor(o) {
    super(o, _order.ObfuscateOrder.Flatten);

    _defineProperty(this, "definedNames", void 0);

    _defineProperty(this, "flattenedFns", void 0);

    _defineProperty(this, "gen", void 0);

    this.definedNames = new Map();
    this.flattenedFns = [];
    this.gen = this.getGenerator();
  }

  apply(tree) {
    (0, _traverse.default)(tree, (o, p) => {
      if (o.type == "Identifier" && !_constants.reservedIdentifiers.has(o.name) && !this.options.globalVariables.has(o.name)) {
        var info = (0, _identifiers.getIdentifierInfo)(o, p);

        if (info.spec.isReferenced) {
          if (info.spec.isDefined) {
            var c = (0, _insert.getVarContext)(o, p);

            if (c) {
              if (!this.definedNames.has(c)) {
                this.definedNames.set(c, new Set([o.name]));
              } else {
                this.definedNames.get(c).add(o.name);
              }
            }
          }
        }
      }
    });
    super.apply(tree);

    if (this.flattenedFns.length) {
      (0, _insert.prepend)(tree, (0, _gen.VariableDeclaration)(this.flattenedFns));
    }
  }

  match(object, parents) {
    return (object.type == "FunctionDeclaration" || object.type === "FunctionExpression") && object.body.type == "BlockStatement" && !object.generator && !object.params.find(x => x.type !== "Identifier");
  }

  transform(object, parents) {
    return () => {
      var _object$id, _parents$, _parents$0$id, _parents$0$id2, _parents$2, _parents$3;

      if (parents[0]) {
        // Don't change class methods
        if (parents[0].type === "MethodDefinition" && parents[0].value === object) {
          return;
        } // Don't change getter/setter methods


        if (parents[0].type === "Property" && parents[0].value === object && parents[0].kind !== "init") {
          return;
        }
      }

      (0, _assert.ok)(object.type === "FunctionDeclaration" || object.type === "FunctionExpression"); // The name is purely for debugging purposes

      var currentFnName = object.type === "FunctionDeclaration" ? (_object$id = object.id) === null || _object$id === void 0 ? void 0 : _object$id.name : ((_parents$ = parents[0]) === null || _parents$ === void 0 ? void 0 : _parents$.type) === "VariableDeclarator" && ((_parents$0$id = parents[0].id) === null || _parents$0$id === void 0 ? void 0 : _parents$0$id.type) === "Identifier" && ((_parents$0$id2 = parents[0].id) === null || _parents$0$id2 === void 0 ? void 0 : _parents$0$id2.name);

      if (((_parents$2 = parents[0]) === null || _parents$2 === void 0 ? void 0 : _parents$2.type) === "Property" && (_parents$3 = parents[0]) !== null && _parents$3 !== void 0 && _parents$3.key) {
        var _parents$4, _parents$4$key, _parents$5, _parents$5$key;

        currentFnName = currentFnName || String(((_parents$4 = parents[0]) === null || _parents$4 === void 0 ? void 0 : (_parents$4$key = _parents$4.key) === null || _parents$4$key === void 0 ? void 0 : _parents$4$key.name) || ((_parents$5 = parents[0]) === null || _parents$5 === void 0 ? void 0 : (_parents$5$key = _parents$5.key) === null || _parents$5$key === void 0 ? void 0 : _parents$5$key.value));
      }

      if (!currentFnName) currentFnName = "unnamed";
      var defined = new Set();
      var references = new Set();
      var modified = new Set();
      var illegal = new Set();
      var isIllegal = false;
      var definedAbove = new Set(this.options.globalVariables);
      parents.forEach(x => {
        var set = this.definedNames.get(x);

        if (set) {
          set.forEach(name => definedAbove.add(name));
        }
      });
      (0, _traverse.walk)(object, parents, (o, p) => {
        if (object.id && o === object.id) {
          return;
        }

        if (o.type == "Identifier" && !this.options.globalVariables.has(o.name) && !_constants.reservedIdentifiers.has(o.name)) {
          var info = (0, _identifiers.getIdentifierInfo)(o, p);

          if (!info.spec.isReferenced) {
            return;
          }

          if (o.hidden) {
            illegal.add(o.name);
          } else if (info.spec.isDefined) {
            defined.add(o.name);
          } else if (info.spec.isModified) {
            modified.add(o.name);
          } else {
            references.add(o.name);
          }
        }

        if (o.type == "TryStatement") {
          isIllegal = true;
          return "EXIT";
        }

        if (o.type == "Identifier") {
          if (o.name == "arguments") {
            isIllegal = true;
            return "EXIT";
          }
        }

        if (o.type == "ThisExpression") {
          isIllegal = true;
          return "EXIT";
        }

        if (o.type == "Super") {
          isIllegal = true;
          return "EXIT";
        }

        if (o.type == "MetaProperty") {
          isIllegal = true;
          return "EXIT";
        }

        if (o.type == "VariableDeclaration" && o.kind !== "var") {
          isIllegal = true;
          return "EXIT";
        }
      });

      if (isIllegal) {
        return;
      }

      if (illegal.size) {
        return;
      }

      defined.forEach(name => {
        references.delete(name);
        modified.delete(name);
      }); // console.log(object.id.name, illegal, references);

      var input = Array.from(new Set([...modified, ...references]));

      if (Array.from(input).find(x => !definedAbove.has(x))) {
        return;
      }

      var output = Array.from(modified);
      var newName = this.getPlaceholder() + "_flat_" + currentFnName;
      var resultName = this.getPlaceholder();
      var propName = this.gen.generate();
      var newOutputNames = Object.create(null);
      output.forEach(name => {
        newOutputNames[name] = this.gen.generate();
      });
      var returnOutputName = this.gen.generate();
      (0, _insert.getBlockBody)(object.body).push((0, _gen.ReturnStatement)());
      (0, _traverse.walk)(object.body, [object, ...parents], (o, p) => {
        // Change return statements from
        // return (argument)
        // to
        // return [ [modifiedRefs],  ]
        if (o.type == "ReturnStatement" && (0, _insert.getVarContext)(o, p) === object) {
          return () => {
            var returnObject = (0, _gen.ObjectExpression)(output.map(outputName => (0, _gen.Property)((0, _gen.Literal)(newOutputNames[outputName]), (0, _gen.Identifier)(outputName), true)));

            if (o.argument && !(o.argument.type == "Identifier" && o.argument.name == "undefined")) {
              // FIX: The return argument must be executed first so it must use 'unshift'
              returnObject.properties.unshift((0, _gen.Property)((0, _gen.Literal)(returnOutputName), (0, _insert.clone)(o.argument), true));
            }

            o.argument = (0, _gen.AssignmentExpression)("=", (0, _gen.MemberExpression)((0, _gen.Identifier)(resultName), (0, _gen.Identifier)(propName), false), returnObject);
          };
        }
      });
      var newBody = (0, _insert.getBlockBody)(object.body); // Remove 'use strict' directive

      if (newBody.length > 0 && newBody[0].directive) {
        newBody.shift();
      }

      var newFunctionExpression = (0, _gen.FunctionExpression)([(0, _gen.ArrayPattern)(input.map(name => (0, _gen.Identifier)(name))), (0, _gen.ArrayPattern)((0, _insert.clone)(object.params)), (0, _gen.Identifier)(resultName)], newBody);
      newFunctionExpression.async = !!object.async;
      newFunctionExpression.generator = !!object.generator;
      this.flattenedFns.push((0, _gen.VariableDeclarator)(newName, newFunctionExpression));
      var newParamNames = object.params.map(() => this.getPlaceholder()); // result.pop()

      var getOutputMemberExpression = outputName => (0, _gen.MemberExpression)((0, _gen.MemberExpression)((0, _gen.Identifier)(resultName), (0, _gen.Literal)(propName), true), (0, _gen.Literal)(outputName), true); // newFn.call([...refs], ...arguments, resultObject)


      var callExpression = (0, _gen.CallExpression)((0, _gen.Identifier)(newName), [(0, _gen.ArrayExpression)(input.map(name => (0, _gen.Identifier)(name))), (0, _gen.ArrayExpression)(newParamNames.map(name => (0, _gen.Identifier)(name))), (0, _gen.Identifier)(resultName)]);
      var newObjectBody = [// var resultObject = {};
      (0, _gen.VariableDeclaration)([(0, _gen.VariableDeclarator)(resultName, (0, _gen.ObjectExpression)([]))]), (0, _gen.ExpressionStatement)(newFunctionExpression.async ? (0, _gen.AwaitExpression)(callExpression) : callExpression)];
      var outputReversed = [...output].reverse(); // realVar

      outputReversed.forEach(outputName => {
        newObjectBody.push((0, _gen.ExpressionStatement)((0, _gen.AssignmentExpression)("=", (0, _gen.Identifier)(outputName), getOutputMemberExpression(newOutputNames[outputName]))));
      }); // DECOY STATEMENTS

      var decoyKey = this.gen.generate();
      var decoyNodes = [// if (result.random) throw result.prop.random
      (0, _gen.IfStatement)((0, _gen.MemberExpression)((0, _gen.Identifier)(resultName), (0, _gen.Literal)(this.gen.generate()), true), [(0, _gen.ThrowStatement)((0, _gen.NewExpression)((0, _gen.Identifier)("Error"), [getOutputMemberExpression(this.gen.generate())]))]), // if (result.random) return true;
      (0, _gen.IfStatement)((0, _gen.MemberExpression)((0, _gen.Identifier)(resultName), (0, _gen.Literal)(this.gen.generate()), true), [(0, _gen.ReturnStatement)((0, _gen.Literal)(true))]), // if (result.random) return result;
      (0, _gen.IfStatement)((0, _gen.MemberExpression)((0, _gen.Identifier)(resultName), (0, _gen.Literal)(this.gen.generate()), true), [(0, _gen.ReturnStatement)((0, _gen.Identifier)(resultName))]), // if (result.random) return result.random;
      (0, _gen.IfStatement)((0, _gen.MemberExpression)((0, _gen.Identifier)(resultName), (0, _gen.Literal)(decoyKey), true), [(0, _gen.ReturnStatement)((0, _gen.MemberExpression)((0, _gen.Identifier)(resultName), (0, _gen.Literal)(decoyKey), true))]), // if(result.random1) return result.random2;
      (0, _gen.IfStatement)((0, _gen.MemberExpression)((0, _gen.Identifier)(resultName), (0, _gen.Literal)(this.gen.generate()), true), [(0, _gen.ReturnStatement)((0, _gen.MemberExpression)((0, _gen.Identifier)(resultName), (0, _gen.Literal)(this.gen.generate()), true))]), // if(result.random) return flatFn;
      (0, _gen.IfStatement)((0, _gen.MemberExpression)((0, _gen.Identifier)(resultName), (0, _gen.Literal)(this.gen.generate()), true), [(0, _gen.ReturnStatement)((0, _gen.Identifier)(newName))]), // if(result.random) flatFn = undefined;
      (0, _gen.IfStatement)((0, _gen.MemberExpression)((0, _gen.Identifier)(resultName), (0, _gen.Literal)(this.gen.generate()), true), [(0, _gen.ExpressionStatement)((0, _gen.AssignmentExpression)("=", (0, _gen.Identifier)(newName), (0, _gen.Identifier)("undefined")))]), // if(!result) return;
      (0, _gen.IfStatement)((0, _gen.UnaryExpression)("!", (0, _gen.Identifier)(resultName)), [(0, _gen.ReturnStatement)()])].filter(() => (0, _random.chance)(25)); // if (result.output) return result.output.returnValue;
      // this is the real return statement, it is always added

      decoyNodes.push((0, _gen.IfStatement)((0, _gen.MemberExpression)((0, _gen.Identifier)(resultName), (0, _gen.Literal)(propName), true), [(0, _gen.ReturnStatement)(getOutputMemberExpression(returnOutputName))]));
      (0, _random.shuffle)(decoyNodes);
      newObjectBody.push(...decoyNodes);
      object.body = (0, _gen.BlockStatement)(newObjectBody);
      object.params = newParamNames.map(name => (0, _gen.Identifier)(name));
    };
  }

}

exports.default = Flatten;